{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://raw.githubusercontent.com/fairtracks/fairtracks_standard/master/json/schema/fairtracks_track.schema.json",
    "$comment": "JSON signature: d3cb625238af299167dc11aad49fda36aaa1fcabaec75f51393584048a551455",
    "title": "Track",
    "type": "object",
    "properties": {
        "@schema": {
            "description": "The JSON Schema absolute URL. Used to link JSON data to a JSON schema. Must match the value of '$id' in the linked schema",
            "type": "string",
            "format": "uri",
            "pattern": "^(https?|ftp)://",
            "const": "https://raw.githubusercontent.com/fairtracks/fairtracks_standard/master/json/schema/fairtracks_track.schema.json"
        },
        "global_id": {
            "description": "Global track identifier, resolvable by identifiers.org [to be created by us]",
            "type": "string",
            "namespace": "fairtracks",
            "examples": [
                "fairtracks:1",
                "fairtracks:2",
                "fairtracks:3",
                "fairtracks:4"
            ],
            "autogenerated": true
        },
        "local_id": {
            "description": "Submitter-local identifier (within investigation/hub) for study (in CURIE-format, if applicable)",
            "type": "string",
            "examples": [
                "encode:ENCFF625ZYB",
                "encode:ENCFF718EPO",
                "encode:ENCFF717PIO",
                "encode:ENCFF955LOC"
            ],
            "unique": true
        },
        "assembly_id": {
            "description": "Genome assembly identifier, resolvable by identifiers.org. Tracks should be annotated with the lowest version of the reference genome that contains all the sequences referenced by the track. Also, GCF (Refseq) ids should be preferred to GCA (Genbank) ids",
            "type": "string",
            "format": "curie",
            "namespace": "insdc.gca",
            "matchType": "canonical",
            "examples": [
                "insdc.gca:GCF_000001405.26",
                "insdc.gca:GCF_000001405.26",
                "insdc.gca:GCF_000001405.26",
                "insdc.gca:GCF_000001405.26"
            ]
        },
        "assembly_name": {
            "description": "Genome assembly name or synonym, according to the NCBI Assembly database. For tracks following UCSC-style chromosome names (e.g., \"chr1\"), the UCSC synonym should be used instead of the official name",
            "type": "string",
            "examples": [
                "hg38",
                "hg38",
                "hg38",
                "hg38"
            ]
        },
        "experiment_ref": {
            "description": "Reference to the experiment of the track (using the submitter-local identifier of the sample)",
            "type": "string",
            "format": "foreign_ref",
            "examples": [
                "encode:ENCSR000DQP",
                "encode:ENCSR000DQP",
                "encode:ENCSR000DQP",
                "encode:ENCSR000DQP"
            ],
            "foreignProperty": "https://raw.githubusercontent.com/fairtracks/fairtracks_standard/master/json/schema/fairtracks_experiment.schema.json#local_id"
        },
        "raw_file_ids": {
            "type": "array",
            "minItems": 1,
            "items": {
                "description": "List of identifiers to raw data files used to create track (typically BAM), resolvable by identifiers.org",
                "type": "string",
                "format": "curie",
                "matchType": "canonical",
                "examples": [
                    "encode: ENCFF207FGO;encode:ENCFF842FEQ",
                    "encode:ENCFF207FGO;encode:ENCFF842FEQ",
                    "encode:ENCFF207FGO;encode:ENCFF842FEQ",
                    "encode:ENCFF207FGO;encode:ENCFF842FEQ"
                ]
            }
        },
        "file_url": {
            "description": "A URL to the track data file",
            "type": "string",
            "format": "uri",
            "pattern": "^(https?|ftp|rsync)://",
            "examples": [
                "https://www.encodeproject.org/files/ENCFF625ZYB/@@download/ENCFF625ZYB.bed.gz",
                "https://www.encodeproject.org/files/ENCFF718EPO/@@download/ENCFF718EPO.bigBed",
                "https://www.encodeproject.org/files/ENCFF717PIO/@@download/ENCFF717PIO.bigWig",
                "https://www.encodeproject.org/files/ENCFF955LOC/@@download/ENCFF955LOC.bigWig"
            ]
        },
        "file_name": {
            "description": "Name of the track file",
            "type": "string",
            "examples": [
                "r1.narrowPeak.gz",
                "r1.narrowPeak.bb",
                "r1.fc_signal.bw",
                "r1.pvalue_signal.bw"
            ],
            "autogenerated": true
        },
        "label_short": {
            "description": "A short label of the track file. Suggested maximum length is 17 characters",
            "type": "string",
            "examples": [
                "ENCFF625ZYB",
                "ENCFF718EPO",
                "ENCFF717PIO",
                " ENCFF955LOC"
            ]
        },
        "label_long": {
            "description": "A long label of the track file. Suggested maximum length is 80 characters",
            "type": "string",
            "examples": [
                "H3K4me3 ChIP-seq of B cell peaks rep1 ENCSR000DQP - ENCFF625ZYB",
                "H3K4me3 ChIP-seq of B cell peaks rep1 ENCSR000DQP - ENCFF718EPO",
                "H3K4me3 ChIP-seq of B cell fold change over control rep1 ENCSR000DQP - ENCFF717PIO",
                "H3K4me3 ChIP-seq of B cell signal p-value rep1 ENCSR000DQP - ENCFF955LOC"
            ]
        },
        "file_format": {
            "description": "File format of the track data file",
            "type": "object",
            "properties": {
                "term_id": {
                    "description": "URL linking to an ontology term",
                    "type": "string",
                    "format": "term",
                    "pattern": "^(https?|ftp)://",
                    "ontology": "http://edamontology.org/EDAM_1.21.owl",
                    "matchType": "exact",
                    "examples": [
                        "http://edamontology.org/format_3613",
                        "http://edamontology.org/format_3004",
                        "http://edamontology.org/format_3006",
                        "http://edamontology.org/format_3006"
                    ]
                },
                "term_label": {
                    "description": "Exact value according to the ontology used",
                    "type": "string",
                    "examples": [
                        "ENCODE narrow peak format",
                        "bigBed",
                        "bigWig",
                        "bigWig"
                    ],
                    "autogenerated": true
                }
            },
            "required": [
                "term_id"
            ]
        },
        "type_of_condensed_data": {
            "description": "Type of condensed track data: Track data, by definition, is formed downstream of some data condensation process. However, the condensed data vary in form and content, technically speaking, and thus in their interpretation. Still, there is a limited set of common types of condensed track data which are able to describe the vast majority of track files",
            "type": "string",
            "enum": [
                "Sequence-derived regions",
                "Experimentally-derived regions",
                "Predicted regions",
                "Predicted segmentation",
                "Population-derived variants",
                "Individual variants",
                "Peaks",
                "Broad peaks",
                "Narrow peaks",
                "Gapped peaks",
                "Signal values (fold change)",
                "Signal values (p-value)",
                "Signal values (log likelihood)",
                "Signal values (other)",
                "Read coverage",
                "Read counts",
                "Mapped single-end reads",
                "Mapped paired-end reads",
                "Other"
            ],
            "examples": [
                "Narrow peaks",
                "Narrow peaks",
                "Signal values (fold change)",
                "Signal values (p-value)"
            ]
        },
        "geometric_track_type": {
            "description": "Geometric type of track, according to the delineation of tracks into one of fifteen logical track types based upon their core informational properties (see doi:10.1186/1471-2105-12-494) ",
            "type": "string",
            "enum": [
                "Points",
                "Valued points",
                "Segments",
                "Valued segments",
                "Genome partition",
                "Step function",
                "Function",
                "Linked points",
                "Linked valued points",
                "Linked segments",
                "Linked valued segments",
                "Linked genome partition",
                "Linked step function",
                "Linked function",
                "Linked base pairs"
            ],
            "examples": [
                "Segments",
                "Segments",
                "Step function",
                "Step function"
            ]
        },
        "checksum": {
            "type": "object",
            "properties": {
                "cs_method": {
                    "description": "Method of checksum generation",
                    "type": "string",
                    "enum": [
                        "MD5",
                        "SHA-256"
                    ],
                    "examples": [
                        "MD5",
                        "MD5",
                        "MD5",
                        "MD5"
                    ]
                },
                "cs_hash": {
                    "description": "Checksum of track file, using the method described in cs_method",
                    "type": "string",
                    "examples": [
                        "0ab98dbd2a2193ab3e09df030ea4f934",
                        "6d2c6c99a7407f1c49ab163e41d9b575",
                        "550ae974bf94f1deb1676613ab24a5da",
                        "942ea96e86313d4338cf3fd020882c4d"
                    ]
                }
            },
            "required": [
                "cs_method",
                "cs_hash"
            ]
        }
    },
    "required": [
        "local_id",
        "assembly_id",
        "assembly_name",
        "experiment_ref",
        "file_url",
        "label_short",
        "label_long",
        "file_format",
        "type_of_condensed_data",
        "geometric_track_type",
        "checksum"
    ],
    "additionalProperties": true
}
