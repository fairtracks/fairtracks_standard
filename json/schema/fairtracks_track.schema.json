{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://raw.githubusercontent.com/fairtracks/fairtracks_standard/v1/current/json/schema/fairtracks_track.schema.json",
    "$version_url": "https://raw.githubusercontent.com/fairtracks/fairtracks_standard/v1/1.0.2/json/schema/fairtracks_track.schema.json",
    "$comment": "JSON signature: 3346a39721f180dc46c5bc13737fc0f3398ae970322c59e6063a9d4363d7ecda",
    "title": "Track",
    "type": "object",
    "properties": {
        "@schema": {
            "title": "Schema URL",
            "description": "The absolute URL of the 'current' version of the relevant FAIRtracks JSON schema within the same major version as the JSON document follows (which should ensure compatibility). Must match the value of '$id' in the linked schema",
            "type": "string",
            "format": "uri",
            "pattern": "^(https?|ftp)://",
            "const": "https://raw.githubusercontent.com/fairtracks/fairtracks_standard/v1/current/json/schema/fairtracks_track.schema.json"
        },
        "global_id": {
            "title": "Global ID",
            "description": "Global track identifier, resolvable by identifiers.org [to be defined]",
            "type": "string",
            "namespace": "fairtracks"
        },
        "local_id": {
            "title": "Local ID",
            "description": "Submitter-local identifier (within investigation/hub) for track (in CURIE-format, if applicable)",
            "type": "string",
            "examples": [
                "encode:ENCFF625ZYB",
                "encode:ENCFF490NHU",
                "encode:ENCFF718EPO",
                "encode:ENCFF447OHZ",
                "encode:ENCFF717PIO",
                "encode:ENCFF615CNJ",
                "encode:ENCFF955LOC",
                "encode:ENCFF492CEQ"
            ],
            "unique": true
        },
        "assembly_id": {
            "title": "Genome Assembly ID",
            "description": "Genome assembly identifier, resolvable by identifiers.org. Tracks should be annotated with the lowest version of the reference genome that contains all the sequences referenced by the track. Also, GCF (Refseq) ids should be preferred to GCA (Genbank) ids",
            "type": "string",
            "format": "curie",
            "namespace": "insdc.gca",
            "matchType": "canonical",
            "examples": [
                "insdc.gca:GCF_000001405.26",
                "insdc.gca:GCF_000001405.26",
                "insdc.gca:GCF_000001405.26",
                "insdc.gca:GCF_000001405.26",
                "insdc.gca:GCF_000001405.26",
                "insdc.gca:GCF_000001405.26",
                "insdc.gca:GCF_000001405.26",
                "insdc.gca:GCF_000001405.26"
            ]
        },
        "assembly_name": {
            "title": "Genome Assembly Name",
            "description": "Genome assembly name or synonym, according to the NCBI Assembly database. For tracks following UCSC-style chromosome names (e.g., \"chr1\"), the UCSC synonym should be used instead of the official name",
            "type": "string",
            "examples": [
                "hg38",
                "hg38",
                "hg38",
                "hg38",
                "hg38",
                "hg38",
                "hg38",
                "hg38"
            ]
        },
        "experiment_ref": {
            "title": "Experiment Reference",
            "description": "Reference to the experiment of the track (using the submitter-local identifier of the sample)",
            "type": "string",
            "format": "foreign_ref",
            "examples": [
                "encode:ENCSR000DQP",
                "encode:ENCSR000DQP",
                "encode:ENCSR000DQP",
                "encode:ENCSR000DQP",
                "encode:ENCSR000DQP",
                "encode:ENCSR000DQP",
                "encode:ENCSR000DQP",
                "encode:ENCSR000DQP"
            ],
            "foreignProperty": "fairtracks_experiment.schema.json#local_id"
        },
        "raw_file_ids": {
            "title": "Raw File IDs",
            "type": "array",
            "minItems": 1,
            "items": {
                "description": "List of identifiers to raw data files used to create track (typically BAM), resolvable by identifiers.org",
                "type": "string",
                "format": "curie",
                "matchType": "canonical",
                "examples": [
                    "encode:ENCFF207FGO;encode:ENCFF842FEQ",
                    "encode:ENCFF207FGO;encode:ENCFF642FEV",
                    "encode:ENCFF207FGO;encode:ENCFF842FEQ",
                    "encode:ENCFF207FGO;encode:ENCFF642FEV",
                    "encode:ENCFF207FGO;encode:ENCFF842FEQ",
                    "encode:ENCFF207FGO;encode:ENCFF642FEV",
                    "encode:ENCFF207FGO;encode:ENCFF842FEQ",
                    "encode:ENCFF207FGO;encode:ENCFF642FEV"
                ]
            }
        },
        "file_url": {
            "title": "File URL",
            "description": "A URL to the track data file",
            "type": "string",
            "format": "uri",
            "pattern": "^(https?|ftp|rsync)://",
            "examples": [
                "https://www.encodeproject.org/files/ENCFF625ZYB/@@download/ENCFF625ZYB.bed.gz",
                "https://www.encodeproject.org/files/ENCFF490NHU/@@download/ENCFF490NHU.bed.gz",
                "https://www.encodeproject.org/files/ENCFF718EPO/@@download/ENCFF718EPO.bigBed",
                "https://www.encodeproject.org/files/ENCFF447OHZ/@@download/ENCFF447OHZ.bigBed",
                "https://www.encodeproject.org/files/ENCFF717PIO/@@download/ENCFF717PIO.bigWig",
                "https://www.encodeproject.org/files/ENCFF615CNJ/@@download/ENCFF615CNJ.bigWig",
                "https://www.encodeproject.org/files/ENCFF955LOC/@@download/ENCFF955LOC.bigWig",
                "https://www.encodeproject.org/files/ENCFF492CEQ/@@download/ENCFF492CEQ.bigWig"
            ]
        },
        "file_name": {
            "title": "File Name",
            "description": "Name of the track file",
            "type": "string",
            "examples": [
                "ENCFF625ZYB.bed.gz",
                "ENCFF490NHU.bed.gz",
                "ENCFF718EPO.bigBed",
                "ENCFF447OHZ.bigBed",
                "ENCFF717PIO.bigWig",
                "ENCFF615CNJ.bigWig",
                "ENCFF955LOC.bigWig",
                "ENCFF492CEQ.bigWig"
            ],
            "augmented": true
        },
        "label_short": {
            "title": "Label (Short)",
            "description": "A short label of the track file. Suggested maximum length is 25 characters",
            "type": "string",
            "examples": [
                "H3K4me3 B cell peaks r1",
                "H3K4me3 B cell peaks r2",
                "H3K4me3 B cell peaks r1",
                " H3K4me3 B cell peaks r2",
                "H3K4me3 B cell fold change r1",
                "H3K4me3 B cell fold change r2",
                "H3K4me3 B cell signal p-value r1",
                "H3K4me3 B cell p-value r2"
            ]
        },
        "label_long": {
            "title": "Label (Long)",
            "description": "A long label of the track file. Suggested maximum length is 80 characters",
            "type": "string",
            "examples": [
                "H3K4me3 ChIP-seq of B cell peaks rep1 ENCSR000DQP - ENCFF625ZYB",
                "H3K4me3 ChIP-seq of B cell peaks rep2 ENCSR000DQP - ENCFF490NHU",
                "H3K4me3 ChIP-seq of B cell peaks rep1 ENCSR000DQP - ENCFF718EPO",
                "H3K4me3 ChIP-seq of B cell peaks rep2 ENCSR000DQP - ENCFF447OHZ",
                "H3K4me3 ChIP-seq of B cell fold change over control rep1 ENCSR000DQP - ENCFF717PIO",
                "H3K4me3 ChIP-seq of B cell fold change over control rep2 ENCSR000DQP - ENCFF615CNJ",
                "H3K4me3 ChIP-seq of B cell signal p-value rep1 ENCSR000DQP - ENCFF955LOC",
                "H3K4me3 ChIP-seq of B cell signal p-value rep2 ENCSR000DQP - ENCFF492CEQ"
            ]
        },
        "file_format": {
            "title": "File Format",
            "description": "File format of the track data file",
            "type": "object",
            "ontologyTermPair": {
                "id": "0/term_id",
                "label": "0/term_label"
            },
            "properties": {
                "term_id": {
                    "title": "Term ID",
                    "description": "URL linking to an ontology term",
                    "type": "string",
                    "format": "term",
                    "pattern": "^(https?|ftp)://",
                    "ontology": "http://edamontology.org/EDAM.owl",
                    "matchType": "exact",
                    "examples": [
                        "http://edamontology.org/format_3613",
                        "http://edamontology.org/format_3613",
                        "http://edamontology.org/format_3004",
                        "http://edamontology.org/format_3004",
                        "http://edamontology.org/format_3006",
                        "http://edamontology.org/format_3006",
                        "http://edamontology.org/format_3006",
                        "http://edamontology.org/format_3006"
                    ]
                },
                "term_label": {
                    "title": "Term Label",
                    "description": "Exact value according to the ontology used",
                    "type": "string",
                    "examples": [
                        "ENCODE narrow peak format",
                        "ENCODE narrow peak format",
                        "bigBed",
                        "bigBed",
                        "bigWig",
                        "bigWig",
                        "bigWig",
                        "bigWig"
                    ],
                    "augmented": true
                }
            },
            "required": [
                "term_id"
            ]
        },
        "type_of_condensed_data": {
            "title": "Type of Condensed Track Data",
            "description": "Type of condensed track data: Track data, by definition, is formed downstream of some data condensation process. However, the condensed data vary in form and content, technically speaking, and thus in their interpretation. Still, there is a limited set of common types of condensed track data which are able to describe the vast majority of track files",
            "type": "string",
            "enum": [
                "Sequence-derived regions",
                "Experimentally-derived regions",
                "Predicted regions",
                "Predicted segmentation",
                "Population-derived variants",
                "Individual variants",
                "Peaks",
                "Broad peaks",
                "Narrow peaks",
                "Gapped peaks",
                "Signal values (fold change)",
                "Signal values (p-value)",
                "Signal values (log likelihood)",
                "Signal values (other)",
                "Read coverage",
                "Read counts",
                "Mapped single-end reads",
                "Mapped paired-end reads",
                "Other"
            ],
            "examples": [
                "Narrow peaks",
                "Narrow peaks",
                "Narrow peaks",
                "Narrow peaks",
                "Signal values (fold change)",
                "Signal values (fold change)",
                "Signal values (p-value)",
                "Signal values (p-value)"
            ]
        },
        "geometric_track_type": {
            "title": "Geometric Track Type",
            "description": "Geometric type of track, according to the delineation of tracks into one of fifteen logical track types based upon their core informational properties (see doi:10.1186/1471-2105-12-494) ",
            "type": "string",
            "enum": [
                "Points",
                "Valued points",
                "Segments",
                "Valued segments",
                "Genome partition",
                "Step function",
                "Function",
                "Linked points",
                "Linked valued points",
                "Linked segments",
                "Linked valued segments",
                "Linked genome partition",
                "Linked step function",
                "Linked function",
                "Linked base pairs"
            ],
            "examples": [
                "Segments",
                "Segments",
                "Segments",
                "Segments",
                "Step function",
                "Step function",
                "Step function",
                "Step function"
            ]
        },
        "checksum": {
            "title": "File Checksum",
            "type": "object",
            "properties": {
                "cs_method": {
                    "title": "Method",
                    "description": "Method of checksum generation",
                    "type": "string",
                    "enum": [
                        "MD5",
                        "SHA-256"
                    ],
                    "examples": [
                        "MD5",
                        "MD5",
                        "MD5",
                        "MD5",
                        "MD5",
                        "MD5",
                        "MD5",
                        "MD5"
                    ]
                },
                "cs_hash": {
                    "title": "Hash",
                    "description": "Checksum of track file, using the method described in cs_method",
                    "type": "string",
                    "examples": [
                        "0ab98dbd2a2193ab3e09df030ea4f934",
                        " 3303226e0604d22900771d965fb7a3d2",
                        "6d2c6c99a7407f1c49ab163e41d9b575",
                        " aaa951221e1fbb62282bc73060de0339",
                        "550ae974bf94f1deb1676613ab24a5da",
                        " a1b4ae6b4eddd8fbd6edd6bf535d2eb5",
                        "942ea96e86313d4338cf3fd020882c4d",
                        " 51a548338912eef85b72aa21a9a2a555"
                    ]
                }
            },
            "required": [
                "cs_method",
                "cs_hash"
            ]
        }
    },
    "required": [
        "local_id",
        "assembly_id",
        "assembly_name",
        "experiment_ref",
        "file_url",
        "label_short",
        "label_long",
        "file_format",
        "type_of_condensed_data",
        "geometric_track_type",
        "checksum"
    ],
    "additionalProperties": true
}
